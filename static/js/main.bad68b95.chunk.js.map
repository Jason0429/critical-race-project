{"version":3,"sources":["img/dragon_transparent.png","img/envelope.png","components/Envelope.js","data/trivia.js","App.js","reportWebVitals.js","index.js"],"names":["Envelope","src","envelope","alt","className","trivia","question","answers","correctAnswer","App","currentTrivia","useRef","useState","dragonTop","setDragonTop","started","setStarted","isTriviaOpen","setIsTriviaOpen","answered","setAnswered","moveDragon","e","keyCode","prevState","window","innerHeight","document","querySelector","offsetHeight","handleAnswerCheck","target","innerText","trim","current","setTimeout","$","addClass","alert","useEffect","dragon","$envelope","$clouds","$mountains","addEventListener","value","style","top","parseInt","substring","length","getTop","setInterval","a","b","aRect","getBoundingClientRect","bRect","height","left","width","isCollide","removeClass","console","log","handleOpenTrivia","onClick","map","answer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bad68b95.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/dragon_transparent.a28783bc.png\";","export default __webpack_public_path__ + \"static/media/envelope.6ae6b7ca.png\";","import React from 'react';\r\nimport envelope from '../img/envelope.png';\r\n\r\nfunction Envelope() {\r\n\treturn <img src={envelope} alt=\"envelope\" className=\"envelope\" />;\r\n}\r\n\r\nexport default Envelope;\r\n","export const trivia = [\r\n\t{\r\n\t\tquestion: 'What is 5 + 5',\r\n\t\tanswers: ['1', '2', '5', '10'],\r\n\t\tcorrectAnswer: '10'\r\n\t},\r\n\t{\r\n\t\tquestion: 'What is 6 + 2',\r\n\t\tanswers: ['1', '2', '8', '10'],\r\n\t\tcorrectAnswer: '8'\r\n\t},\r\n\t{\r\n\t\tquestion: 'What is 1 + 5',\r\n\t\tanswers: ['1', '6', '5', '10'],\r\n\t\tcorrectAnswer: '6'\r\n\t}\r\n];\r\n","import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport dragon from './img/dragon_transparent.png';\nimport envelope from './img/envelope.png';\nimport Envelope from './components/Envelope';\nimport $ from 'jquery';\nimport { trivia } from './data/trivia';\n\nfunction App() {\n\tconst currentTrivia = useRef(0);\n\tconst [dragonTop, setDragonTop] = useState(200);\n\tconst [started, setStarted] = useState(false);\n\tconst [isTriviaOpen, setIsTriviaOpen] = useState(false);\n\tconst [answered, setAnswered] = useState(false);\n\tconst speed = 10;\n\n\tuseEffect(() => {\n\t\t// HTML elements and JQuery HTML elements\n\t\tconst dragon = document.querySelector('.dragon');\n\t\tconst envelope = document.querySelector('.envelope');\n\t\tconst $dragon = $('.dragon');\n\t\tconst $envelope = $('.envelope');\n\t\tconst $clouds = $('.clouds');\n\t\tconst $mountains = $('.mountains');\n\n\t\t// Arrow event listeners\n\t\tdocument.addEventListener('keydown', moveDragon);\n\n\t\t// Set initial top position\n\t\tsetDragonTop(getTop());\n\n\t\t// Check for dragon and envelope collision\n\t\tconst collisionTimer = setInterval(() => {\n\t\t\tif (isCollide(dragon, envelope)) {\n\t\t\t\t// alert('collided');\n\t\t\t\t$envelope.removeClass('go-right');\n\t\t\t\t$clouds.removeClass('go-left');\n\t\t\t\t$mountains.removeClass('go-left');\n\n\t\t\t\thandleOpenTrivia();\n\n\t\t\t\t// clearInterval(collisionTimer);\n\t\t\t}\n\t\t}, 100);\n\t}, [setDragonTop]);\n\n\tfunction getTop() {\n\t\tlet value = document.querySelector('.dragon').style.top;\n\t\treturn parseInt(value.substring(0, value.length - 2));\n\t}\n\n\t// a: HTML element\n\t// b: HTML element\n\tfunction isCollide(a, b) {\n\t\tvar aRect = a.getBoundingClientRect();\n\t\tvar bRect = b.getBoundingClientRect();\n\n\t\treturn !(\n\t\t\taRect.top + aRect.height < bRect.top ||\n\t\t\taRect.top > bRect.top + bRect.height ||\n\t\t\taRect.left + aRect.width < bRect.left ||\n\t\t\taRect.left > bRect.left + bRect.width\n\t\t);\n\t}\n\n\tfunction handleStart() {\n\t\tsetStarted(true);\n\t\tsetTimeout(() => {\n\t\t\t$('.clouds').addClass('go-left');\n\t\t\t$('.mountains').addClass('go-left');\n\t\t\t$('.envelope').addClass('go-right');\n\t\t}, 500);\n\t}\n\n\tfunction moveDragon(e) {\n\t\tconst key = e.keyCode;\n\t\tswitch (key) {\n\t\t\t// Up Arrow\n\t\t\tcase 38:\n\t\t\t\tsetDragonTop((prevState) =>\n\t\t\t\t\tprevState - speed < 0 ? prevState : prevState - speed\n\t\t\t\t);\n\t\t\t\tbreak;\n\n\t\t\t// Down Arrow\n\t\t\tcase 40:\n\t\t\t\tsetDragonTop((prevState) =>\n\t\t\t\t\tprevState + speed >\n\t\t\t\t\twindow.innerHeight -\n\t\t\t\t\t\tdocument.querySelector('.dragon').offsetHeight\n\t\t\t\t\t\t? prevState\n\t\t\t\t\t\t: prevState + speed\n\t\t\t\t);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tfunction handleOpenTrivia() {\n\t\tconsole.log('THIS OPEN TRIVIA: ' + currentTrivia.current);\n\t\tif (currentTrivia.current >= trivia.length) {\n\t\t\tsetStarted(false);\n\t\t\tsetIsTriviaOpen(false);\n\t\t\tcurrentTrivia.current = 0;\n\t\t\tendGame();\n\t\t\treturn;\n\t\t}\n\n\t\tsetIsTriviaOpen(true);\n\t}\n\n\tfunction handleCloseTrivia() {\n\t\tsetIsTriviaOpen(false);\n\t\tsetAnswered(false);\n\t\tcurrentTrivia.current++;\n\t}\n\n\tfunction handleAnswerCheck(e) {\n\t\tlet answer = e.target.innerText.trim();\n\t\tif (answer === trivia[currentTrivia.current].correctAnswer) {\n\t\t\tsetAnswered(true);\n\t\t\tsetTimeout(() => {\n\t\t\t\thandleCloseTrivia();\n\t\t\t\t$('.clouds').addClass('go-left');\n\t\t\t\t$('.mountains').addClass('go-left');\n\t\t\t\t$('.envelope').addClass('go-right');\n\t\t\t}, 2000);\n\t\t} else {\n\t\t\talert('Try again!');\n\t\t}\n\t}\n\n\tfunction endGame() {\n\t\talert('Game has ended');\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{/* Blur overlay */}\n\t\t\t{(!started || isTriviaOpen) && <div className=\"blur-overlay\"></div>}\n\n\t\t\t{/* Start Screen */}\n\t\t\t{!started && (\n\t\t\t\t<div className=\"start-screen\">\n\t\t\t\t\t<div className=\"title\">Instructions</div>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\tUse UP and DOWN arrow keys to navigate the dragon.\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>Collect envelopes to reveal hidden messages.</li>\n\t\t\t\t\t\t<li>Press the Start Button to begin the adventure.</li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<button className=\"btn\" onClick={handleStart}>\n\t\t\t\t\t\tStart\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t{/* Trivia Screen */}\n\t\t\t{isTriviaOpen && started && (\n\t\t\t\t<div className=\"trivia-screen\">\n\t\t\t\t\t<div className=\"question\">\n\t\t\t\t\t\t{trivia[currentTrivia.current].question}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"answer-list\">\n\t\t\t\t\t\t{trivia[currentTrivia.current].answers.map((answer) => (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"answer-choice\"\n\t\t\t\t\t\t\t\tonClick={handleAnswerCheck}>\n\t\t\t\t\t\t\t\t{answer}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t\t{answered && (\n\t\t\t\t\t\t<div className=\"correct-answer\">\n\t\t\t\t\t\t\tThe correct answer is:{' '}\n\t\t\t\t\t\t\t{trivia[currentTrivia.current].correctAnswer}!\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t<div className=\"clouds\"></div>\n\t\t\t<Envelope />\n\t\t\t<img\n\t\t\t\tsrc={dragon}\n\t\t\t\talt=\"dragon\"\n\t\t\t\tclassName=\"dragon\"\n\t\t\t\tstyle={{ top: `${dragonTop}px` }}\n\t\t\t/>\n\t\t\t<div className=\"mountains\"></div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}